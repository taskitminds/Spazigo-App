import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:spazigo/models/container.dart';
import 'firebase_options.dart'; // This file will be generated by FlutterFire CLI

// Providers
import 'package:spazigo/providers/auth_provider.dart';
import 'package:spazigo/providers/theme_provider.dart';
import 'package:spazigo/providers/user_provider.dart';
import 'package:spazigo/services/firebase_messaging_service.dart'; // FCM Service

// Screens
import 'package:spazigo/screens/onboarding_screen.dart';
import 'package:spazigo/screens/auth/login_screen.dart';
import 'package:spazigo/screens/auth/register_role_selection_screen.dart';
import 'package:spazigo/screens/auth/lsp_registration_form_screen.dart';
import 'package:spazigo/screens/auth/msme_registration_form_screen.dart';
import 'package:spazigo/screens/auth/await_admin_approval_screen.dart';
import 'package:spazigo/screens/auth/access_denied_screen.dart';
import 'package:spazigo/screens/lsp/lsp_dashboard_screen.dart';
import 'package:spazigo/screens/msme/msme_home_screen.dart';

import 'screens/chat/chat_detail_screen.dart';
import 'screens/chat/chat_list_screen.dart';
import 'screens/lsp/add_container_screen.dart';
import 'screens/lsp/lsp_booking_requests_screen.dart';
import 'screens/lsp/lsp_container_listing_screen.dart';
import 'screens/msme/book_container_form_screen.dart';
import 'screens/msme/msme_booking_page.dart';
import 'screens/profile_screen.dart';
import 'screens/settings_screen.dart';

// Define a global key for the NavigatorState
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  // Pass the navigatorKey.currentContext to initialize FCM, which can be null initially
  await FirebaseMessagingService.initialize(navigatorKey); // Pass the navigatorKey

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => AuthProvider()),
        ChangeNotifierProxyProvider<AuthProvider, UserProvider>(
          create: (_) => UserProvider(),
          update: (_, auth, user) => user!..update(auth.currentUser),
        ),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late final GoRouter _router;

  @override
  void initState() {
    super.initState();
    final authProvider = Provider.of<AuthProvider>(context, listen: false);

    // Define the router
    _router = GoRouter(
      navigatorKey: navigatorKey, // Assign the global key to the router
      initialLocation: '/',
      refreshListenable: authProvider, // Rebuilds routes when auth state changes
      routes: [
        GoRoute(
          path: '/',
          redirect: (context, state) async {
            // Check if user is logged in
            if (!authProvider.isAuthenticated) {
              await authProvider.loadAuthData(); // Attempt to load from secure storage
              if (!authProvider.isAuthenticated) {
                return '/onboarding'; // Go to onboarding if not authenticated
              }
            }

            // If authenticated, redirect based on user status/role
            if (authProvider.isAuthenticated) {
              final user = authProvider.currentUser;
              if (user == null) return '/login'; // Should not happen if authenticated, but safety check

              if (user.status == 'pending') {
                return '/await-approval';
              } else if (user.status == 'rejected') {
                return '/access-denied';
              } else if (user.status == 'verified') {
                if (user.role == 'lsp') {
                  return '/lsp-dashboard';
                } else if (user.role == 'msme') {
                  return '/msme-home';
                } else if (user.role == 'admin') {
                  // Admin is backend only, but if you had an admin app
                  // return '/admin-dashboard';
                  return '/login'; // Admin UI not in app
                }
              }
            }
            return null; // Stay on the current route if no redirect is needed
          },
          builder: (context, state) => const OnboardingScreen(), // Fallback or initial screen
        ),
        GoRoute(
          path: '/onboarding',
          builder: (context, state) => const OnboardingScreen(),
        ),
        GoRoute(
          path: '/login',
          builder: (context, state) => const LoginScreen(),
        ),
        GoRoute(
          path: '/register',
          builder: (context, state) => const RegisterRoleSelectionScreen(),
        ),
        GoRoute(
          path: '/register-lsp',
          builder: (context, state) => const LspRegistrationFormScreen(),
        ),
        GoRoute(
          path: '/register-msme',
          builder: (context, state) => const MsmeRegistrationFormScreen(),
        ),
        GoRoute(
          path: '/await-approval',
          builder: (context, state) => const AwaitAdminApprovalScreen(),
        ),
        GoRoute(
          path: '/access-denied',
          builder: (context, state) => AccessDeniedScreen(
            reason: state.extra as String?,
          ),
        ),
        GoRoute(
          path: '/lsp-dashboard',
          builder: (context, state) {
            if (!authProvider.isAuthenticated || authProvider.currentUser?.role != 'lsp') {
              return const LoginScreen(); // Redirect if not authenticated or not LSP
            }
            return const LspDashboardScreen();
          },
        ),
        GoRoute(
          path: '/msme-home',
          builder: (context, state) {
            if (!authProvider.isAuthenticated || authProvider.currentUser?.role != 'msme') {
              return const LoginScreen(); // Redirect if not authenticated or not MSME
            }
            return const MsmeHomeScreen();
          },
        ),
        // Add other routes here as you create screens
        // LSP Routes
        GoRoute(
          path: '/lsp-dashboard/add-container',
          builder: (context, state) => const AddContainerScreen(),
        ),
        GoRoute(
          path: '/lsp-dashboard/containers',
          builder: (context, state) => const LspContainerListingScreen(),
        ),
        GoRoute(
          path: '/lsp-dashboard/booking-requests',
          builder: (context, state) => const LspBookingRequestsScreen(),
        ),
        // MSME Routes
        GoRoute(
          path: '/msme-home/book-container-form',
          builder: (context, state) => BookContainerFormScreen(container: state.extra as ContainerModel),
        ),
        GoRoute(
          path: '/msme-bookings',
          builder: (context, state) => const MsmeBookingsPage(),
        ),
        // Common Routes
        GoRoute(
          path: '/settings',
          builder: (context, state) => const SettingsScreen(),
        ),
        GoRoute(
          path: '/profile',
          builder: (context, state) => const ProfileScreen(),
        ),
        GoRoute(
          path: '/chat-list',
          builder: (context, state) => const ChatListScreen(),
        ),
        GoRoute(
          path: '/chat/:otherUserId',
          builder: (context, state) => ChatDetailScreen(
            otherUserId: state.pathParameters['otherUserId']!,
            containerId: state.uri.queryParameters['containerId'], // Optional
          ),
        ),
      ],
      redirectLimit: 5, // Prevent infinite redirects
      debugLogDiagnostics: true,
      errorBuilder: (context, state) => const Text('Error: Page not found'), // Simple error page
    );
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<ThemeProvider>(
      builder: (context, themeProvider, child) {
        return MaterialApp.router(
          title: 'Spazigo',
          theme: themeProvider.lightTheme,
          darkTheme: themeProvider.darkTheme,
          themeMode: themeProvider.themeMode,
          routerConfig: _router,
          debugShowCheckedModeBanner: false,
        );
      },
    );
  }
}